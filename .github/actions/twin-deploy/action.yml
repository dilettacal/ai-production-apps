name: 'Deploy Twin App'
description: 'Deploy the Twin application to specified environment'
inputs:
  environment:
    description: 'Environment to deploy to'
    required: true
    default: 'dev'
  aws_role_arn:
    description: 'AWS Role ARN for GitHub Actions'
    required: true
  aws_region:
    description: 'AWS Region'
    required: true
    default: 'eu-west-1'

runs:
  using: 'composite'
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install uv
      shell: bash
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: twin/frontend/package-lock.json

    - name: Run Deployment Script
      shell: bash
      run: |
        export AWS_ROLE_ARN=$AWS_ROLE_ARN
        export AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID
        export DEFAULT_AWS_REGION=$DEFAULT_AWS_REGION
        export PERSONAL_DATA_BUCKET="twin-data-${{ inputs.environment }}"
        echo "DEFAULT_AWS_REGION is set to: $DEFAULT_AWS_REGION"
        echo "PERSONAL_DATA_BUCKET is set to: $PERSONAL_DATA_BUCKET"
        chmod +x twin/scripts/deploy.sh
        cd twin
        ./scripts/deploy.sh ${{ inputs.environment }}

    - name: Get Deployment URLs
      id: deploy_outputs
      shell: bash
      working-directory: ./twin/terraform
      run: |
        terraform workspace select ${{ inputs.environment }}
        echo "cloudfront_url=$(terraform output -raw cloudfront_url)" >> $GITHUB_OUTPUT
        echo "api_url=$(terraform output -raw api_gateway_url)" >> $GITHUB_OUTPUT
        echo "frontend_bucket=$(terraform output -raw s3_frontend_bucket)" >> $GITHUB_OUTPUT

    - name: Invalidate CloudFront
      shell: bash
      run: |
        DISTRIBUTION_ID=$(aws cloudfront list-distributions \
          --query "DistributionList.Items[?Origins.Items[?DomainName=='${{ steps.deploy_outputs.outputs.frontend_bucket }}.s3-website-${{ inputs.aws_region }}.amazonaws.com']].Id | [0]" \
          --output text)
        
        if [ "$DISTRIBUTION_ID" != "None" ] && [ -n "$DISTRIBUTION_ID" ]; then
          aws cloudfront create-invalidation \
            --distribution-id $DISTRIBUTION_ID \
            --paths "/*"
        fi

    - name: Deployment Summary
      shell: bash
      run: |
        echo "‚úÖ Twin Deployment Complete!"
        echo "üåê CloudFront URL: ${{ steps.deploy_outputs.outputs.cloudfront_url }}"
        echo "üì° API Gateway: ${{ steps.deploy_outputs.outputs.api_url }}"
        echo "ü™£ Frontend Bucket: ${{ steps.deploy_outputs.outputs.frontend_bucket }}"
